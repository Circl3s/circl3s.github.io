import './Programming.svelte.css.proxy.js';
/* src/portfolio/Programming.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import Button from "../shared/Button.svelte.js";
import Card from "../shared/Card.svelte.js";
import Footer from "../shared/Footer.svelte.js";
import Navbar from "../shared/Navbar.svelte.js";
import Portfolio from "./Portfolio.svelte.js";
import Section from "../shared/Section.svelte.js";
import TechInfo from "../shared/TechInfo.svelte.js";

function create_default_slot_9(ctx) {
	let h1;
	let t1;
	let div1;

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "Programming";
			t1 = space();
			div1 = element("div");

			div1.innerHTML = `<div class="col svelte-1byclsg"><p>I love programming. Here are some of the projects I made.<br/>
                    (This section will be expanded)</p></div>`;

			attr(h1, "class", "svelte-1byclsg");
			attr(div1, "class", "content svelte-1byclsg");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, div1, anchor);
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(div1);
		}
	};
}

// (108:12) 
function create_title_slot_5(ctx) {
	let h2;

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "circl3s.github.io";
			attr(h2, "slot", "title");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (121:24) 
function create_header_slot_12(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "logo svelte-1byclsg");
			if (img.src !== (img_src_value = "/img/svelte-logotype.png")) attr(img, "src", img_src_value);
			attr(img, "alt", "Svelte");
			attr(img, "slot", "header");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (122:24) 
function create_content_slot_18(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "The website is made out of custom reusable and responsive components built with Svelte.";
			attr(p, "slot", "content");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (127:24) 
function create_header_slot_11(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="logo svelte-1byclsg" src="/img/snowpack.svg" alt="Snowpack Logo"/>Snowpack`;
			attr(div, "class", "logotype text-2xl svelte-1byclsg");
			attr(div, "slot", "header");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (128:24) 
function create_content_slot_17(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "I chose Snowpack as the build tool because of its simplicity and speed.";
			attr(p, "slot", "content");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (133:24) 
function create_header_slot_10(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "logo svelte-1byclsg");
			if (img.src !== (img_src_value = "/img/tailwindcss-logotype.svg")) attr(img, "src", img_src_value);
			attr(img, "alt", "TailwindCSS");
			attr(img, "slot", "header");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (134:24) 
function create_content_slot_16(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "TailwindCSS is used to style the website. It allowed me to maintain creative freedom and minimal stylesheet size while keeping the styles standardized.";
			attr(p, "slot", "content");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (139:24) 
function create_header_slot_9(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "logo svelte-1byclsg");
			if (img.src !== (img_src_value = "/img/supabase-logo-wordmark--dark.svg")) attr(img, "src", img_src_value);
			attr(img, "alt", "Supabase");
			attr(img, "slot", "header");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (140:24) 
function create_content_slot_15(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "Supabase is used to run the \"News\" microblog on this site. As an open source alternative to Firebase, it's a great tool for small projects.";
			attr(p, "slot", "content");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (145:16) <Button href="https://github.com/Circl3s/circl3s.github.io/">
function create_default_slot_8(ctx) {
	let t;

	return {
		c() {
			t = text("View source code");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (109:12) 
function create_content_slot_14(ctx) {
	let div1;
	let p0;
	let t4;
	let p1;
	let t6;
	let div0;
	let techinfo0;
	let t7;
	let techinfo1;
	let t8;
	let techinfo2;
	let t9;
	let techinfo3;
	let t10;
	let button;
	let current;

	techinfo0 = new TechInfo({
			props: {
				bg_color: "#F73C00",
				text_color: "white",
				$$slots: {
					content: [create_content_slot_18],
					header: [create_header_slot_12]
				},
				$$scope: { ctx }
			}
		});

	techinfo1 = new TechInfo({
			props: {
				bg_color: "#2E5E82",
				text_color: "white",
				$$slots: {
					content: [create_content_slot_17],
					header: [create_header_slot_11]
				},
				$$scope: { ctx }
			}
		});

	techinfo2 = new TechInfo({
			props: {
				bg_color: "#FFFFFF",
				text_color: "black",
				$$slots: {
					content: [create_content_slot_16],
					header: [create_header_slot_10]
				},
				$$scope: { ctx }
			}
		});

	techinfo3 = new TechInfo({
			props: {
				bg_color: "#1E1E1E",
				text_color: "white",
				$$slots: {
					content: [create_content_slot_15],
					header: [create_header_slot_9]
				},
				$$scope: { ctx }
			}
		});

	button = new Button({
			props: {
				href: "https://github.com/Circl3s/circl3s.github.io/",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div1 = element("div");
			p0 = element("p");

			p0.innerHTML = `Access: <code class="text-green-500">Public</code><br/>
                    Development: <code class="text-green-500">Active</code>`;

			t4 = space();
			p1 = element("p");
			p1.textContent = "That's this site. \n                    I kinda overengineered it on purpose so there's a lot of technologies and frameworks at play here. \n                    The important part is that it's not a template, it's been built and styled from the ground up by me.";
			t6 = space();
			div0 = element("div");
			create_component(techinfo0.$$.fragment);
			t7 = space();
			create_component(techinfo1.$$.fragment);
			t8 = space();
			create_component(techinfo2.$$.fragment);
			t9 = space();
			create_component(techinfo3.$$.fragment);
			t10 = space();
			create_component(button.$$.fragment);
			attr(p0, "class", "status svelte-1byclsg");
			attr(div0, "class", "techstack svelte-1byclsg");
			attr(div1, "class", "description");
			attr(div1, "slot", "content");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, p0);
			append(div1, t4);
			append(div1, p1);
			append(div1, t6);
			append(div1, div0);
			mount_component(techinfo0, div0, null);
			append(div0, t7);
			mount_component(techinfo1, div0, null);
			append(div0, t8);
			mount_component(techinfo2, div0, null);
			append(div0, t9);
			mount_component(techinfo3, div0, null);
			append(div1, t10);
			mount_component(button, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			const techinfo0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				techinfo0_changes.$$scope = { dirty, ctx };
			}

			techinfo0.$set(techinfo0_changes);
			const techinfo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				techinfo1_changes.$$scope = { dirty, ctx };
			}

			techinfo1.$set(techinfo1_changes);
			const techinfo2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				techinfo2_changes.$$scope = { dirty, ctx };
			}

			techinfo2.$set(techinfo2_changes);
			const techinfo3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				techinfo3_changes.$$scope = { dirty, ctx };
			}

			techinfo3.$set(techinfo3_changes);
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(techinfo0.$$.fragment, local);
			transition_in(techinfo1.$$.fragment, local);
			transition_in(techinfo2.$$.fragment, local);
			transition_in(techinfo3.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(techinfo0.$$.fragment, local);
			transition_out(techinfo1.$$.fragment, local);
			transition_out(techinfo2.$$.fragment, local);
			transition_out(techinfo3.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(techinfo0);
			destroy_component(techinfo1);
			destroy_component(techinfo2);
			destroy_component(techinfo3);
			destroy_component(button);
		}
	};
}

// (151:12) 
function create_title_slot_4(ctx) {
	let h2;

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "Cybertracks";
			attr(h2, "slot", "title");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (163:24) 
function create_header_slot_8(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "logo svelte-1byclsg");
			if (img.src !== (img_src_value = "/img/React.png")) attr(img, "src", img_src_value);
			attr(img, "alt", "React");
			attr(img, "slot", "header");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (164:24) 
function create_content_slot_13(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "The one-page UI is built with custom React components.";
			attr(p, "slot", "content");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (169:24) 
function create_header_slot_7(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "logo svelte-1byclsg");
			if (img.src !== (img_src_value = "/img/tailwindcss-logotype.svg")) attr(img, "src", img_src_value);
			attr(img, "alt", "TailwindCSS");
			attr(img, "slot", "header");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (170:24) 
function create_content_slot_12(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "TailwindCSS is used to style the website. It allowed me to maintain creative freedom and minimal stylesheet size while keeping the styles standardized.";
			attr(p, "slot", "content");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (175:24) 
function create_header_slot_6(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "logo svelte-1byclsg");
			if (img.src !== (img_src_value = "/img/Tonejs.png")) attr(img, "src", img_src_value);
			attr(img, "alt", "TailwindCSS");
			attr(img, "slot", "header");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (176:24) 
function create_content_slot_11(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "All audio is sequenced, generated and processed by the Web Audio API through the use of Tone.js.";
			attr(p, "slot", "content");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (182:20) <Button disabled>
function create_default_slot_7(ctx) {
	let t;

	return {
		c() {
			t = text("Open app (soon)");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (185:20) <Button href="https://github.com/Circl3s/cybertracks">
function create_default_slot_6(ctx) {
	let t;

	return {
		c() {
			t = text("View source code");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (152:12) 
function create_content_slot_10(ctx) {
	let div2;
	let p0;
	let t4;
	let p1;
	let t6;
	let div0;
	let techinfo0;
	let t7;
	let techinfo1;
	let t8;
	let techinfo2;
	let t9;
	let div1;
	let button0;
	let t10;
	let button1;
	let current;

	techinfo0 = new TechInfo({
			props: {
				bg_color: "#282C34",
				text_color: "white",
				$$slots: {
					content: [create_content_slot_13],
					header: [create_header_slot_8]
				},
				$$scope: { ctx }
			}
		});

	techinfo1 = new TechInfo({
			props: {
				bg_color: "#FFFFFF",
				text_color: "black",
				$$slots: {
					content: [create_content_slot_12],
					header: [create_header_slot_7]
				},
				$$scope: { ctx }
			}
		});

	techinfo2 = new TechInfo({
			props: {
				bg_color: "#000000",
				text_color: "white",
				$$slots: {
					content: [create_content_slot_11],
					header: [create_header_slot_6]
				},
				$$scope: { ctx }
			}
		});

	button0 = new Button({
			props: {
				disabled: true,
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	button1 = new Button({
			props: {
				href: "https://github.com/Circl3s/cybertracks",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div2 = element("div");
			p0 = element("p");

			p0.innerHTML = `Access: <code class="text-yellow-500">Soon</code><br/>
                    Development: <code class="text-green-500">Active</code>`;

			t4 = space();
			p1 = element("p");
			p1.textContent = "A tracker-style music creation tool for the web. \n                    I wanted to honor the long-forgotten great-grandfathers of Digital Audio Workstations by implementing their unique workflow on a website.";
			t6 = space();
			div0 = element("div");
			create_component(techinfo0.$$.fragment);
			t7 = space();
			create_component(techinfo1.$$.fragment);
			t8 = space();
			create_component(techinfo2.$$.fragment);
			t9 = space();
			div1 = element("div");
			create_component(button0.$$.fragment);
			t10 = space();
			create_component(button1.$$.fragment);
			attr(p0, "class", "status svelte-1byclsg");
			attr(div0, "class", "techstack svelte-1byclsg");
			attr(div1, "class", "actions svelte-1byclsg");
			attr(div2, "class", "description");
			attr(div2, "slot", "content");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, p0);
			append(div2, t4);
			append(div2, p1);
			append(div2, t6);
			append(div2, div0);
			mount_component(techinfo0, div0, null);
			append(div0, t7);
			mount_component(techinfo1, div0, null);
			append(div0, t8);
			mount_component(techinfo2, div0, null);
			append(div2, t9);
			append(div2, div1);
			mount_component(button0, div1, null);
			append(div1, t10);
			mount_component(button1, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			const techinfo0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				techinfo0_changes.$$scope = { dirty, ctx };
			}

			techinfo0.$set(techinfo0_changes);
			const techinfo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				techinfo1_changes.$$scope = { dirty, ctx };
			}

			techinfo1.$set(techinfo1_changes);
			const techinfo2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				techinfo2_changes.$$scope = { dirty, ctx };
			}

			techinfo2.$set(techinfo2_changes);
			const button0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(techinfo0.$$.fragment, local);
			transition_in(techinfo1.$$.fragment, local);
			transition_in(techinfo2.$$.fragment, local);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(techinfo0.$$.fragment, local);
			transition_out(techinfo1.$$.fragment, local);
			transition_out(techinfo2.$$.fragment, local);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(techinfo0);
			destroy_component(techinfo1);
			destroy_component(techinfo2);
			destroy_component(button0);
			destroy_component(button1);
		}
	};
}

// (192:12) 
function create_title_slot_3(ctx) {
	let h2;

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "Neko Launcher";
			attr(h2, "slot", "title");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (204:24) 
function create_header_slot_5(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			if (img.src !== (img_src_value = "/img/Flutter.svg")) attr(img, "src", img_src_value);
			attr(img, "alt", "Flutter");
			attr(img, "class", "logo svelte-1byclsg");
			attr(img, "slot", "header");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (205:24) 
function create_content_slot_9(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "The desktop app is built with the Flutter framework using Material widgets.";
			attr(p, "slot", "content");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (210:24) 
function create_header_slot_4(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "logo svelte-1byclsg");
			if (img.src !== (img_src_value = "/img/supabase-logo-wordmark--dark.svg")) attr(img, "src", img_src_value);
			attr(img, "alt", "Supabase");
			attr(img, "slot", "header");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (211:24) 
function create_content_slot_8(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "Using the launcher you can register and login, customize your profile and socialize with other users. Supabase is the all-in-one backend handling this.";
			attr(p, "slot", "content");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (217:20) <Button href="https://github.com/Neko-Services/neko_launcher_neo/releases" color="green">
function create_default_slot_5(ctx) {
	let t;

	return {
		c() {
			t = text("Download");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (220:20) <Button href="https://github.com/Neko-Services/neko_launcher_neo">
function create_default_slot_4(ctx) {
	let t;

	return {
		c() {
			t = text("View source code");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (193:12) 
function create_content_slot_7(ctx) {
	let div2;
	let p0;
	let t4;
	let p1;
	let t6;
	let div0;
	let techinfo0;
	let t7;
	let techinfo1;
	let t8;
	let div1;
	let button0;
	let t9;
	let button1;
	let current;

	techinfo0 = new TechInfo({
			props: {
				bg_color: "#042B59",
				text_color: "white",
				$$slots: {
					content: [create_content_slot_9],
					header: [create_header_slot_5]
				},
				$$scope: { ctx }
			}
		});

	techinfo1 = new TechInfo({
			props: {
				bg_color: "#1E1E1E",
				text_color: "white",
				$$slots: {
					content: [create_content_slot_8],
					header: [create_header_slot_4]
				},
				$$scope: { ctx }
			}
		});

	button0 = new Button({
			props: {
				href: "https://github.com/Neko-Services/neko_launcher_neo/releases",
				color: "green",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	button1 = new Button({
			props: {
				href: "https://github.com/Neko-Services/neko_launcher_neo",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div2 = element("div");
			p0 = element("p");

			p0.innerHTML = `Access: <code class="text-green-500">Public</code><br/>
                    Development: <code class="text-green-500">Active</code>`;

			t4 = space();
			p1 = element("p");
			p1.textContent = "A game launcher focused on, but not limited to anime-style visual novels. \n                    Allows players to track their play time, categorize their games collection and even socialize, while being customizable.";
			t6 = space();
			div0 = element("div");
			create_component(techinfo0.$$.fragment);
			t7 = space();
			create_component(techinfo1.$$.fragment);
			t8 = space();
			div1 = element("div");
			create_component(button0.$$.fragment);
			t9 = space();
			create_component(button1.$$.fragment);
			attr(p0, "class", "status svelte-1byclsg");
			attr(div0, "class", "techstack svelte-1byclsg");
			attr(div1, "class", "actions svelte-1byclsg");
			attr(div2, "class", "description");
			attr(div2, "slot", "content");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, p0);
			append(div2, t4);
			append(div2, p1);
			append(div2, t6);
			append(div2, div0);
			mount_component(techinfo0, div0, null);
			append(div0, t7);
			mount_component(techinfo1, div0, null);
			append(div2, t8);
			append(div2, div1);
			mount_component(button0, div1, null);
			append(div1, t9);
			mount_component(button1, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			const techinfo0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				techinfo0_changes.$$scope = { dirty, ctx };
			}

			techinfo0.$set(techinfo0_changes);
			const techinfo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				techinfo1_changes.$$scope = { dirty, ctx };
			}

			techinfo1.$set(techinfo1_changes);
			const button0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(techinfo0.$$.fragment, local);
			transition_in(techinfo1.$$.fragment, local);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(techinfo0.$$.fragment, local);
			transition_out(techinfo1.$$.fragment, local);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(techinfo0);
			destroy_component(techinfo1);
			destroy_component(button0);
			destroy_component(button1);
		}
	};
}

// (227:12) 
function create_title_slot_2(ctx) {
	let h2;

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "LoveShell";
			attr(h2, "slot", "title");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (239:24) 
function create_header_slot_3(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "logo svelte-1byclsg");
			if (img.src !== (img_src_value = "/img/crystal_logo.svg")) attr(img, "src", img_src_value);
			attr(img, "alt", "Crystal");
			attr(img, "slot", "header");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (240:24) 
function create_content_slot_6(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "LoveShell is written in Crystal, a new blazing fast and type-safe programming language inspired by Ruby, which I really like.";
			attr(p, "slot", "content");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (245:24) 
function create_header_slot_2(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "logo svelte-1byclsg");
			if (img.src !== (img_src_value = "/img/BASH_logo-transparent-bg-color.svg")) attr(img, "src", img_src_value);
			attr(img, "alt", "Bash");
			attr(img, "slot", "header");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (246:24) 
function create_content_slot_5(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "LoveShell still uses Bash under the hood as to not reinvent the wheel when it comes to scripting and environment variables.";
			attr(p, "slot", "content");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (251:16) <Button href="https://github.com/I-love-os/LoveShell">
function create_default_slot_3(ctx) {
	let t;

	return {
		c() {
			t = text("View source code");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (228:12) 
function create_content_slot_4(ctx) {
	let div1;
	let p0;
	let t4;
	let p1;
	let t6;
	let div0;
	let techinfo0;
	let t7;
	let techinfo1;
	let t8;
	let button;
	let current;

	techinfo0 = new TechInfo({
			props: {
				bg_color: "#FFFFFF",
				text_color: "#000000",
				$$slots: {
					content: [create_content_slot_6],
					header: [create_header_slot_3]
				},
				$$scope: { ctx }
			}
		});

	techinfo1 = new TechInfo({
			props: {
				bg_color: "#FFFFFF",
				text_color: "#2F3A3E",
				$$slots: {
					content: [create_content_slot_5],
					header: [create_header_slot_2]
				},
				$$scope: { ctx }
			}
		});

	button = new Button({
			props: {
				href: "https://github.com/I-love-os/LoveShell",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div1 = element("div");
			p0 = element("p");

			p0.innerHTML = `Access: <code class="text-yellow-500">Source Only</code><br/>
                    Development: <code class="text-red-500">Stopped</code>`;

			t4 = space();
			p1 = element("p");
			p1.textContent = "LoveShell is a fast and customizable Linux shell I made with my friends. \n                    The main idea was to make a shell that is easy to use and configure to beginners and nice looking out of the box.";
			t6 = space();
			div0 = element("div");
			create_component(techinfo0.$$.fragment);
			t7 = space();
			create_component(techinfo1.$$.fragment);
			t8 = space();
			create_component(button.$$.fragment);
			attr(p0, "class", "status svelte-1byclsg");
			attr(div0, "class", "techstack svelte-1byclsg");
			attr(div1, "class", "description");
			attr(div1, "slot", "content");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, p0);
			append(div1, t4);
			append(div1, p1);
			append(div1, t6);
			append(div1, div0);
			mount_component(techinfo0, div0, null);
			append(div0, t7);
			mount_component(techinfo1, div0, null);
			append(div1, t8);
			mount_component(button, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			const techinfo0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				techinfo0_changes.$$scope = { dirty, ctx };
			}

			techinfo0.$set(techinfo0_changes);
			const techinfo1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				techinfo1_changes.$$scope = { dirty, ctx };
			}

			techinfo1.$set(techinfo1_changes);
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(techinfo0.$$.fragment, local);
			transition_in(techinfo1.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(techinfo0.$$.fragment, local);
			transition_out(techinfo1.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(techinfo0);
			destroy_component(techinfo1);
			destroy_component(button);
		}
	};
}

// (256:12) 
function create_title_slot_1(ctx) {
	let h2;

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "Circl3s' Super Breakout";
			attr(h2, "slot", "title");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (267:24) 
function create_header_slot_1(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "logo svelte-1byclsg");
			if (img.src !== (img_src_value = "/img/PICO-8_logo.png")) attr(img, "src", img_src_value);
			attr(img, "alt", "PICO-8");
			attr(img, "slot", "header");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (268:24) 
function create_content_slot_3(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "The game is built for and with the PICO-8 fantasy console, a retro Lua game engine, platform, and toolset.";
			attr(p, "slot", "content");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (273:16) <Button href="https://github.com/Circl3s/circl3s-super-breakout/">
function create_default_slot_2(ctx) {
	let t;

	return {
		c() {
			t = text("View source code");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (257:12) 
function create_content_slot_2(ctx) {
	let div1;
	let p0;
	let t4;
	let p1;
	let t8;
	let div0;
	let techinfo;
	let t9;
	let button;
	let current;

	techinfo = new TechInfo({
			props: {
				bg_color: "#000000",
				text_color: "#FFF1E8",
				$$slots: {
					content: [create_content_slot_3],
					header: [create_header_slot_1]
				},
				$$scope: { ctx }
			}
		});

	button = new Button({
			props: {
				href: "https://github.com/Circl3s/circl3s-super-breakout/",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div1 = element("div");
			p0 = element("p");

			p0.innerHTML = `Access: <code class="text-green-500">Public</code><br/>
                    Development: <code class="text-yellow-500">On-hold</code>`;

			t4 = space();
			p1 = element("p");
			p1.innerHTML = `It&#39;s a simple breakout clone I made as an easter egg for <a href="/404">this website&#39;s 404 page</a>. It&#39;s not perfect, but I think that&#39;s part of being retro.`;
			t8 = space();
			div0 = element("div");
			create_component(techinfo.$$.fragment);
			t9 = space();
			create_component(button.$$.fragment);
			attr(p0, "class", "status svelte-1byclsg");
			attr(div0, "class", "techstack svelte-1byclsg");
			attr(div1, "class", "description");
			attr(div1, "slot", "content");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, p0);
			append(div1, t4);
			append(div1, p1);
			append(div1, t8);
			append(div1, div0);
			mount_component(techinfo, div0, null);
			append(div1, t9);
			mount_component(button, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			const techinfo_changes = {};

			if (dirty & /*$$scope*/ 1) {
				techinfo_changes.$$scope = { dirty, ctx };
			}

			techinfo.$set(techinfo_changes);
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(techinfo.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(techinfo.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(techinfo);
			destroy_component(button);
		}
	};
}

// (278:12) 
function create_title_slot(ctx) {
	let h2;

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "Helix";
			attr(h2, "slot", "title");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (289:24) 
function create_header_slot(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="logo svelte-1byclsg" src="/img/webcomponents-logo.svg" alt="WebComponents Logo"/>WEBCOMPONENTS`;
			attr(div, "class", "font-normal logotype text-lg self-center text-black svelte-1byclsg");
			attr(div, "slot", "header");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (290:24) 
function create_content_slot_1(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "This site is written in vanilla Javascript using the Web Components standard to harness the power of reusable components without using heavy frameworks and toolchains.";
			attr(p, "slot", "content");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (295:16) <Button href="https://github.com/Circl3s/helix/">
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text("View source code");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (279:12) 
function create_content_slot(ctx) {
	let div1;
	let p0;
	let t4;
	let p1;
	let t6;
	let div0;
	let techinfo;
	let t7;
	let button;
	let current;

	techinfo = new TechInfo({
			props: {
				bg_color: "#FFFFFF",
				text_color: "#000000",
				$$slots: {
					content: [create_content_slot_1],
					header: [create_header_slot]
				},
				$$scope: { ctx }
			}
		});

	button = new Button({
			props: {
				href: "https://github.com/Circl3s/helix/",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div1 = element("div");
			p0 = element("p");

			p0.innerHTML = `Access: <code class="text-yellow-500">Source only</code><br/>
                    Development: <code class="text-green-500">Active</code>`;

			t4 = space();
			p1 = element("p");
			p1.textContent = "Helix is a self-hosted private video platform suited to host and watch your owned TV series. Frustrated with the setup process of other self-hosted services, I opted to make Helix entirely client-side.";
			t6 = space();
			div0 = element("div");
			create_component(techinfo.$$.fragment);
			t7 = space();
			create_component(button.$$.fragment);
			attr(p0, "class", "status svelte-1byclsg");
			attr(div0, "class", "techstack svelte-1byclsg");
			attr(div1, "class", "description");
			attr(div1, "slot", "content");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, p0);
			append(div1, t4);
			append(div1, p1);
			append(div1, t6);
			append(div1, div0);
			mount_component(techinfo, div0, null);
			append(div1, t7);
			mount_component(button, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			const techinfo_changes = {};

			if (dirty & /*$$scope*/ 1) {
				techinfo_changes.$$scope = { dirty, ctx };
			}

			techinfo.$set(techinfo_changes);
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(techinfo.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(techinfo.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(techinfo);
			destroy_component(button);
		}
	};
}

// (106:4) <Portfolio>
function create_default_slot(ctx) {
	let card0;
	let t0;
	let card1;
	let t1;
	let card2;
	let t2;
	let card3;
	let t3;
	let card4;
	let t4;
	let card5;
	let current;

	card0 = new Card({
			props: {
				size: "2xl",
				$$slots: {
					content: [create_content_slot_14],
					title: [create_title_slot_5]
				},
				$$scope: { ctx }
			}
		});

	card1 = new Card({
			props: {
				size: "2xl",
				$$slots: {
					content: [create_content_slot_10],
					title: [create_title_slot_4]
				},
				$$scope: { ctx }
			}
		});

	card2 = new Card({
			props: {
				size: "2xl",
				$$slots: {
					content: [create_content_slot_7],
					title: [create_title_slot_3]
				},
				$$scope: { ctx }
			}
		});

	card3 = new Card({
			props: {
				size: "2xl",
				$$slots: {
					content: [create_content_slot_4],
					title: [create_title_slot_2]
				},
				$$scope: { ctx }
			}
		});

	card4 = new Card({
			props: {
				size: "2xl",
				$$slots: {
					content: [create_content_slot_2],
					title: [create_title_slot_1]
				},
				$$scope: { ctx }
			}
		});

	card5 = new Card({
			props: {
				size: "2xl",
				$$slots: {
					content: [create_content_slot],
					title: [create_title_slot]
				},
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(card0.$$.fragment);
			t0 = space();
			create_component(card1.$$.fragment);
			t1 = space();
			create_component(card2.$$.fragment);
			t2 = space();
			create_component(card3.$$.fragment);
			t3 = space();
			create_component(card4.$$.fragment);
			t4 = space();
			create_component(card5.$$.fragment);
		},
		m(target, anchor) {
			mount_component(card0, target, anchor);
			insert(target, t0, anchor);
			mount_component(card1, target, anchor);
			insert(target, t1, anchor);
			mount_component(card2, target, anchor);
			insert(target, t2, anchor);
			mount_component(card3, target, anchor);
			insert(target, t3, anchor);
			mount_component(card4, target, anchor);
			insert(target, t4, anchor);
			mount_component(card5, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const card0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card0_changes.$$scope = { dirty, ctx };
			}

			card0.$set(card0_changes);
			const card1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card1_changes.$$scope = { dirty, ctx };
			}

			card1.$set(card1_changes);
			const card2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card2_changes.$$scope = { dirty, ctx };
			}

			card2.$set(card2_changes);
			const card3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card3_changes.$$scope = { dirty, ctx };
			}

			card3.$set(card3_changes);
			const card4_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card4_changes.$$scope = { dirty, ctx };
			}

			card4.$set(card4_changes);
			const card5_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card5_changes.$$scope = { dirty, ctx };
			}

			card5.$set(card5_changes);
		},
		i(local) {
			if (current) return;
			transition_in(card0.$$.fragment, local);
			transition_in(card1.$$.fragment, local);
			transition_in(card2.$$.fragment, local);
			transition_in(card3.$$.fragment, local);
			transition_in(card4.$$.fragment, local);
			transition_in(card5.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(card0.$$.fragment, local);
			transition_out(card1.$$.fragment, local);
			transition_out(card2.$$.fragment, local);
			transition_out(card3.$$.fragment, local);
			transition_out(card4.$$.fragment, local);
			transition_out(card5.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(card0, detaching);
			if (detaching) detach(t0);
			destroy_component(card1, detaching);
			if (detaching) detach(t1);
			destroy_component(card2, detaching);
			if (detaching) detach(t2);
			destroy_component(card3, detaching);
			if (detaching) detach(t3);
			destroy_component(card4, detaching);
			if (detaching) detach(t4);
			destroy_component(card5, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let navbar;
	let t0;
	let section;
	let t1;
	let portfolio;
	let t2;
	let footer;
	let current;

	navbar = new Navbar({
			props: {
				subtitle: "Programming",
				always_visible: true
			}
		});

	section = new Section({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			}
		});

	portfolio = new Portfolio({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	footer = new Footer({});

	return {
		c() {
			div = element("div");
			create_component(navbar.$$.fragment);
			t0 = space();
			create_component(section.$$.fragment);
			t1 = space();
			create_component(portfolio.$$.fragment);
			t2 = space();
			create_component(footer.$$.fragment);
			attr(div, "class", "Programming svelte-1byclsg");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(navbar, div, null);
			append(div, t0);
			mount_component(section, div, null);
			append(div, t1);
			mount_component(portfolio, div, null);
			append(div, t2);
			mount_component(footer, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const section_changes = {};

			if (dirty & /*$$scope*/ 1) {
				section_changes.$$scope = { dirty, ctx };
			}

			section.$set(section_changes);
			const portfolio_changes = {};

			if (dirty & /*$$scope*/ 1) {
				portfolio_changes.$$scope = { dirty, ctx };
			}

			portfolio.$set(portfolio_changes);
		},
		i(local) {
			if (current) return;
			transition_in(navbar.$$.fragment, local);
			transition_in(section.$$.fragment, local);
			transition_in(portfolio.$$.fragment, local);
			transition_in(footer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(navbar.$$.fragment, local);
			transition_out(section.$$.fragment, local);
			transition_out(portfolio.$$.fragment, local);
			transition_out(footer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(navbar);
			destroy_component(section);
			destroy_component(portfolio);
			destroy_component(footer);
		}
	};
}

class Programming extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Programming;