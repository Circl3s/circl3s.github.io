import './Hobbies.svelte.css.proxy.js';
/* src/index/Hobbies.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import Button from "../shared/Button.svelte.js";
import Card from "../shared/Card.svelte.js";
import Marker from "../shared/Marker.svelte.js";
import MusicBox from "./MusicBox.svelte.js";
import Typewriter from "./Typewriter.svelte.js";
import WebGL from "../shared/WebGL.svelte.js";

function create_title_slot_1(ctx) {
	let h2;

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "Sound Design";
			attr(h2, "slot", "title");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (70:20) <Button>
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text("Browse");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (66:16) 
function create_content_slot_1(ctx) {
	let div;
	let musicbox;
	let t0;
	let p;
	let t2;
	let button;
	let current;
	musicbox = new MusicBox({});

	button = new Button({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			create_component(musicbox.$$.fragment);
			t0 = space();
			p = element("p");
			p.textContent = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestiae facilis autem nostrum nam! Maxime quaerat expedita iste quo sunt nostrum ipsa, esse id sint adipisci blanditiis amet. Minus, in qui.";
			t2 = space();
			create_component(button.$$.fragment);
			attr(p, "class", "svelte-18x7nsg");
			attr(div, "slot", "content");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(musicbox, div, null);
			append(div, t0);
			append(div, p);
			append(div, t2);
			mount_component(button, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(musicbox.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(musicbox.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(musicbox);
			destroy_component(button);
		}
	};
}

// (78:16) 
function create_title_slot(ctx) {
	let h2;

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "Programming";
			attr(h2, "slot", "title");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (85:20) <Button>
function create_default_slot(ctx) {
	let t;

	return {
		c() {
			t = text("Browse");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (81:16) 
function create_content_slot(ctx) {
	let div;
	let typewriter;
	let t0;
	let p;
	let t2;
	let button;
	let current;
	typewriter = new Typewriter({});

	button = new Button({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			create_component(typewriter.$$.fragment);
			t0 = space();
			p = element("p");
			p.textContent = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestiae facilis autem nostrum nam! Maxime quaerat expedita iste quo sunt nostrum ipsa, esse id sint adipisci blanditiis amet. Minus, in qui.";
			t2 = space();
			create_component(button.$$.fragment);
			attr(p, "class", "svelte-18x7nsg");
			attr(div, "slot", "content");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(typewriter, div, null);
			append(div, t0);
			append(div, p);
			append(div, t2);
			mount_component(button, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(typewriter.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(typewriter.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(typewriter);
			destroy_component(button);
		}
	};
}

// (93:8) {#if window.WebGLRenderingContext}
function create_if_block(ctx) {
	let webgl;
	let current;
	webgl = new WebGL({});

	return {
		c() {
			create_component(webgl.$$.fragment);
		},
		m(target, anchor) {
			mount_component(webgl, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(webgl.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(webgl.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(webgl, detaching);
		}
	};
}

function create_fragment(ctx) {
	let marker;
	let t0;
	let div4;
	let div2;
	let div0;
	let card0;
	let t1;
	let div1;
	let card1;
	let t2;
	let div3;
	let current;
	marker = new Marker({ props: { name: "hobbies" } });

	card0 = new Card({
			props: {
				$$slots: {
					content: [create_content_slot_1],
					title: [create_title_slot_1]
				},
				$$scope: { ctx }
			}
		});

	card1 = new Card({
			props: {
				$$slots: {
					content: [create_content_slot],
					title: [create_title_slot]
				},
				$$scope: { ctx }
			}
		});

	let if_block = window.WebGLRenderingContext && create_if_block(ctx);

	return {
		c() {
			create_component(marker.$$.fragment);
			t0 = space();
			div4 = element("div");
			div2 = element("div");
			div0 = element("div");
			create_component(card0.$$.fragment);
			t1 = space();
			div1 = element("div");
			create_component(card1.$$.fragment);
			t2 = space();
			div3 = element("div");
			if (if_block) if_block.c();
			attr(div0, "class", "hobby svelte-18x7nsg");
			attr(div1, "class", "hobby svelte-18x7nsg");
			attr(div2, "class", "columns svelte-18x7nsg");
			attr(div3, "class", "bg svelte-18x7nsg");
			attr(div4, "class", "Hobbies svelte-18x7nsg");
		},
		m(target, anchor) {
			mount_component(marker, target, anchor);
			insert(target, t0, anchor);
			insert(target, div4, anchor);
			append(div4, div2);
			append(div2, div0);
			mount_component(card0, div0, null);
			append(div2, t1);
			append(div2, div1);
			mount_component(card1, div1, null);
			append(div4, t2);
			append(div4, div3);
			if (if_block) if_block.m(div3, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const card0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card0_changes.$$scope = { dirty, ctx };
			}

			card0.$set(card0_changes);
			const card1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card1_changes.$$scope = { dirty, ctx };
			}

			card1.$set(card1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(marker.$$.fragment, local);
			transition_in(card0.$$.fragment, local);
			transition_in(card1.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(marker.$$.fragment, local);
			transition_out(card0.$$.fragment, local);
			transition_out(card1.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			destroy_component(marker, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div4);
			destroy_component(card0);
			destroy_component(card1);
			if (if_block) if_block.d();
		}
	};
}

class Hobbies extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Hobbies;