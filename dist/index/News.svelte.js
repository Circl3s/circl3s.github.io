import './News.svelte.css.proxy.js';
/* src/index/News.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import Marker from "../shared/Marker.svelte.js";
import Card from "../shared/Card.svelte.js";
import CosmeticNotch from "../shared/CosmeticNotch.svelte.js";
import Timestamp from "../shared/Timestamp.svelte.js";
import Button from "../shared/Button.svelte.js";
import { onMount } from "../../_snowpack/pkg/svelte.js";
import { createClient } from "../../_snowpack/pkg/@supabase/supabase-js.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (151:8) {:else}
function create_else_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*post_array*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*post_array, Date*/ 2) {
				each_value = /*post_array*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (149:8) {#if post_array.length == 0}
function create_if_block(ctx) {
	let h3;

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "Getting posts...";
			attr(h3, "class", "svelte-e43o5l");
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			/*h3_binding*/ ctx[2](h3);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h3);
			/*h3_binding*/ ctx[2](null);
		}
	};
}

// (155:24) 
function create_title_slot(ctx) {
	let h2;
	let t_value = /*post*/ ctx[5].title + "";
	let t;

	return {
		c() {
			h2 = element("h2");
			t = text(t_value);
			attr(h2, "slot", "title");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},
		p(ctx, dirty) {
			if (dirty & /*post_array*/ 2 && t_value !== (t_value = /*post*/ ctx[5].title + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (160:28) {#if post.link}
function create_if_block_1(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				href: /*post*/ ctx[5].link,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*post_array*/ 2) button_changes.href = /*post*/ ctx[5].link;

			if (dirty & /*$$scope, post_array*/ 258) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (161:32) <Button href={post.link}>
function create_default_slot(ctx) {
	let t_value = (/*post*/ ctx[5].action ?? "Open") + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*post_array*/ 2 && t_value !== (t_value = (/*post*/ ctx[5].action ?? "Open") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (156:24) 
function create_content_slot(ctx) {
	let div;
	let timestamp;
	let t0;
	let img;
	let img_src_value;
	let img_alt_value;
	let t1;
	let p;
	let t2_value = /*post*/ ctx[5].content + "";
	let t2;
	let t3;
	let current;

	timestamp = new Timestamp({
			props: {
				time: new Date(/*post*/ ctx[5].created_at)
			}
		});

	let if_block = /*post*/ ctx[5].link && create_if_block_1(ctx);

	return {
		c() {
			div = element("div");
			create_component(timestamp.$$.fragment);
			t0 = space();
			img = element("img");
			t1 = space();
			p = element("p");
			t2 = text(t2_value);
			t3 = space();
			if (if_block) if_block.c();
			attr(img, "class", "thumb svelte-e43o5l");
			if (img.src !== (img_src_value = "https://chailagpncxzrnujqznl.supabase.in/storage/v1/object/public/post-images/" + /*post*/ ctx[5].image)) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*post*/ ctx[5].alt);
			attr(p, "class", "svelte-e43o5l");
			attr(div, "class", "content svelte-e43o5l");
			attr(div, "slot", "content");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(timestamp, div, null);
			append(div, t0);
			append(div, img);
			append(div, t1);
			append(div, p);
			append(p, t2);
			append(div, t3);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			const timestamp_changes = {};
			if (dirty & /*post_array*/ 2) timestamp_changes.time = new Date(/*post*/ ctx[5].created_at);
			timestamp.$set(timestamp_changes);

			if (!current || dirty & /*post_array*/ 2 && img.src !== (img_src_value = "https://chailagpncxzrnujqznl.supabase.in/storage/v1/object/public/post-images/" + /*post*/ ctx[5].image)) {
				attr(img, "src", img_src_value);
			}

			if (!current || dirty & /*post_array*/ 2 && img_alt_value !== (img_alt_value = /*post*/ ctx[5].alt)) {
				attr(img, "alt", img_alt_value);
			}

			if ((!current || dirty & /*post_array*/ 2) && t2_value !== (t2_value = /*post*/ ctx[5].content + "")) set_data(t2, t2_value);

			if (/*post*/ ctx[5].link) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*post_array*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(timestamp.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(timestamp.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(timestamp);
			if (if_block) if_block.d();
		}
	};
}

// (152:12) {#each post_array as post}
function create_each_block(ctx) {
	let div;
	let card;
	let t;
	let current;

	card = new Card({
			props: {
				size: "sm",
				$$slots: {
					content: [create_content_slot],
					title: [create_title_slot]
				},
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			create_component(card.$$.fragment);
			t = space();
			attr(div, "class", "mobile-first svelte-e43o5l");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(card, div, null);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			const card_changes = {};

			if (dirty & /*$$scope, post_array*/ 258) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(card);
		}
	};
}

function create_fragment(ctx) {
	let cosmeticnotch;
	let t0;
	let marker;
	let t1;
	let div1;
	let h1;
	let t3;
	let div0;
	let current_block_type_index;
	let if_block;
	let current;
	cosmeticnotch = new CosmeticNotch({ props: { orientation: "bottom-right" } });
	marker = new Marker({ props: { name: "news" } });
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*post_array*/ ctx[1].length == 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			create_component(cosmeticnotch.$$.fragment);
			t0 = space();
			create_component(marker.$$.fragment);
			t1 = space();
			div1 = element("div");
			h1 = element("h1");
			h1.textContent = "News";
			t3 = space();
			div0 = element("div");
			if_block.c();
			attr(h1, "class", "svelte-e43o5l");
			attr(div0, "class", "items svelte-e43o5l");
			attr(div0, "id", "items");
			attr(div1, "class", "News svelte-e43o5l");
		},
		m(target, anchor) {
			mount_component(cosmeticnotch, target, anchor);
			insert(target, t0, anchor);
			mount_component(marker, target, anchor);
			insert(target, t1, anchor);
			insert(target, div1, anchor);
			append(div1, h1);
			append(div1, t3);
			append(div1, div0);
			if_blocks[current_block_type_index].m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div0, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(cosmeticnotch.$$.fragment, local);
			transition_in(marker.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(cosmeticnotch.$$.fragment, local);
			transition_out(marker.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			destroy_component(cosmeticnotch, detaching);
			if (detaching) detach(t0);
			destroy_component(marker, detaching);
			if (detaching) detach(t1);
			if (detaching) detach(div1);
			if_blocks[current_block_type_index].d();
		}
	};
}

const supabaseUrl = "https://chailagpncxzrnujqznl.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYzNzk0NDE2MywiZXhwIjoxOTUzNTIwMTYzfQ.j7HbrIrT1elnirf8zk1hT3cM0xi6JLc9A92qH4_rEJ0";

function instance($$self, $$props, $$invalidate) {
	let ph_text;
	let post_array = [];
	const supabase = createClient(supabaseUrl, supabaseKey);

	async function populate() {
		let { data: posts, error } = await supabase.from("posts").select("*").order("created_at", { ascending: false }).limit(3);

		if (error) {
			$$invalidate(0, ph_text.innerText = "Error while getting posts.", ph_text);
		} else if (posts.length == 0) {
			$$invalidate(0, ph_text.innerText = "No posts found.", ph_text);
		} else {
			$$invalidate(0, ph_text.style.display = "none", ph_text);
			$$invalidate(1, post_array = posts);
		}
	}

	onMount(async () => {
		await populate();
	});

	function h3_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ph_text = $$value;
			$$invalidate(0, ph_text);
		});
	}

	return [ph_text, post_array, h3_binding];
}

class News extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default News;