import './Typewriter.svelte.css.proxy.js';
/* src/index/Typewriter.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_style,
	space
} from "../../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../../_snowpack/pkg/svelte.js";

function create_fragment(ctx) {
	let div;
	let span0;
	let t0;
	let span1;

	return {
		c() {
			div = element("div");
			span0 = element("span");
			t0 = space();
			span1 = element("span");
			span1.textContent = "█";
			set_style(span1, "visibility", "hidden");
			attr(span1, "id", "fakecursor");
			attr(div, "class", "Typewriter svelte-7mnqfr");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span0);
			/*span0_binding*/ ctx[2](span0);
			append(div, t0);
			append(div, span1);
			/*span1_binding*/ ctx[3](span1);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*span0_binding*/ ctx[2](null);
			/*span1_binding*/ ctx[3](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let editor;
	let cursor;

	let snippets = [
		`function hello() {\n⠀⠀console.log("Hello World!")\n}\n\nfor (let i = 0; i < 5; i++) {\n⠀⠀hello()\n}`,
		`define hello():\n⠀⠀print("Hello World!")\n\nfor _ in range(5):\n⠀⠀hello()`,
		`def hello()\n⠀⠀puts "Hello World!"\nend\n\n5.times do\n⠀⠀hello()\nend`,
		`function Write-Greeting {\n⠀⠀Write-Output "Hello World!"\n}\n\nFor ($i = 0; $i -lt 5; $i++) {\n⠀⠀Write-Greeting\n}`
	];

	function blink() {
		if (cursor.style.visibility == "visible") {
			$$invalidate(1, cursor.style.visibility = "hidden", cursor);
		} else {
			$$invalidate(1, cursor.style.visibility = "visible", cursor);
		}
	}

	function colorize() {
		switch (snippet_i) {
			case 0:
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("function", `<span class="text-purple-400 italic">function</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("let", `<span class="text-purple-400 italic">let</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("for", `<span class="text-purple-400 italic">for</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replaceAll("i ", `<span class="text-red-400">i </span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replaceAll("i++", `<span class="text-red-400">i</span>++`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replaceAll("hello", `<span class="text-green-400">hello</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("console", `<span class="text-yellow-400">console</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("log", `<span class="text-green-400">log</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace(`"Hello World!"`, `<span class="text-red-400">"Hello World!"</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace(" 0", `<span class="text-yellow-400"> 0</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace(" 5", `<span class="text-yellow-400"> 5</span>`), editor);
				break;
			case 1:
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("define", `<span class="text-purple-400 italic">define</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("for", `<span class="text-purple-400 italic">for</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace(" in", `<span class="text-purple-400 italic"> in</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replaceAll("hello", `<span class="text-green-400">hello</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("print", `<span class="text-green-400">print</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("range", `<span class="text-green-400">range</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("5", `<span class="text-yellow-400">5</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace(`"Hello World!"`, `<span class="text-red-400">"Hello World!"</span>`), editor);
				break;
			case 2:
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("def", `<span class="text-purple-400 italic">def</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replaceAll("end", `<span class="text-purple-400 italic">end</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("do", `<span class="text-purple-400">do</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replaceAll("hello", `<span class="text-green-400">hello</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("puts", `<span class="text-green-400">puts</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace(`"Hello World!"`, `<span class="text-red-400">"Hello World!"</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("5", `<span class="text-yellow-400">5</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("times", `<span class="text-green-400">times</span>`), editor);
				break;
			case 3:
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("function", `<span class="text-purple-400 italic">function</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("For", `<span class="text-purple-400 italic">For</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replaceAll("Write-Greeting", `<span class="text-green-400">Write-Greeting</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("Write-Output", `<span class="text-green-400">Write-Output</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replaceAll("$i ", `<span class="text-red-400">$i </span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("$i++", `<span class="text-red-400">$i</span>++`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace("-lt", `<span class="text-gray-400">-lt</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace(" 0", `<span class="text-yellow-400"> 0</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace(" 5", `<span class="text-yellow-400"> 5</span>`), editor);
				$$invalidate(0, editor.innerHTML = editor.innerHTML.replace(`"Hello World!"`, `<span class="text-red-400">"Hello World!"</span>`), editor);
				break;
			default:
				break;
		}
	}

	let i = 0;
	let snippet_i = -1;

	function typeWriter() {
		if (i < snippets[snippet_i].length) {
			$$invalidate(0, editor.innerText += snippets[snippet_i].charAt(i), editor);
			i++;
			colorize();
			setTimeout(typeWriter, 3000 / snippets[snippet_i].length);
		}
	}

	function reset() {
		i = 0;
		snippet_i += 1;

		if (snippet_i > snippets.length - 1) {
			snippet_i = 0;
		}

		$$invalidate(0, editor.innerHTML = "", editor);
		typeWriter();
		setTimeout(reset, 5000);
	}

	onMount(() => {
		setInterval(blink, 500);
		reset();
	});

	function span0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			editor = $$value;
			$$invalidate(0, editor);
		});
	}

	function span1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			cursor = $$value;
			$$invalidate(1, cursor);
		});
	}

	return [editor, cursor, span0_binding, span1_binding];
}

class Typewriter extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Typewriter;