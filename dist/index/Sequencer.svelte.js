import './Sequencer.svelte.css.proxy.js';
/* src/index/Sequencer.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../../_snowpack/pkg/svelte.js";
import Step from "./Step.svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (64:8) {#each steps[0] as step}
function create_each_block_3(ctx) {
	let step;
	let current;

	step = new Step({
			props: { color: "red", active: /*step*/ ctx[12] }
		});

	return {
		c() {
			create_component(step.$$.fragment);
		},
		m(target, anchor) {
			mount_component(step, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(step.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(step.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(step, detaching);
		}
	};
}

// (69:8) {#each steps[1] as step}
function create_each_block_2(ctx) {
	let step;
	let current;

	step = new Step({
			props: {
				color: "yellow",
				active: /*step*/ ctx[12]
			}
		});

	return {
		c() {
			create_component(step.$$.fragment);
		},
		m(target, anchor) {
			mount_component(step, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(step.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(step.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(step, detaching);
		}
	};
}

// (74:8) {#each steps[2] as step}
function create_each_block_1(ctx) {
	let step;
	let current;

	step = new Step({
			props: {
				color: "indigo",
				active: /*step*/ ctx[12]
			}
		});

	return {
		c() {
			create_component(step.$$.fragment);
		},
		m(target, anchor) {
			mount_component(step, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(step.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(step.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(step, detaching);
		}
	};
}

// (79:8) {#each steps[3] as step}
function create_each_block(ctx) {
	let step;
	let current;

	step = new Step({
			props: { color: "green", active: /*step*/ ctx[12] }
		});

	return {
		c() {
			create_component(step.$$.fragment);
		},
		m(target, anchor) {
			mount_component(step, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(step.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(step.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(step, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div4;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let t2;
	let div3;
	let current;
	let each_value_3 = /*steps*/ ctx[4][0];
	let each_blocks_3 = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const out = i => transition_out(each_blocks_3[i], 1, 1, () => {
		each_blocks_3[i] = null;
	});

	let each_value_2 = /*steps*/ ctx[4][1];
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const out_1 = i => transition_out(each_blocks_2[i], 1, 1, () => {
		each_blocks_2[i] = null;
	});

	let each_value_1 = /*steps*/ ctx[4][2];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out_2 = i => transition_out(each_blocks_1[i], 1, 1, () => {
		each_blocks_1[i] = null;
	});

	let each_value = /*steps*/ ctx[4][3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out_3 = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div4 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].c();
			}

			t0 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t1 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t2 = space();
			div3 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "channel svelte-7p2j98");
			attr(div0, "id", "channel-1");
			attr(div1, "class", "channel svelte-7p2j98");
			attr(div1, "id", "channel-2");
			attr(div2, "class", "channel svelte-7p2j98");
			attr(div2, "id", "channel-3");
			attr(div3, "class", "channel svelte-7p2j98");
			attr(div3, "id", "channel-4");
			attr(div4, "class", "Sequencer svelte-7p2j98");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div0);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].m(div0, null);
			}

			/*div0_binding*/ ctx[5](div0);
			append(div4, t0);
			append(div4, div1);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(div1, null);
			}

			/*div1_binding*/ ctx[6](div1);
			append(div4, t1);
			append(div4, div2);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div2, null);
			}

			/*div2_binding*/ ctx[7](div2);
			append(div4, t2);
			append(div4, div3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div3, null);
			}

			/*div3_binding*/ ctx[8](div3);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*steps*/ 16) {
				each_value_3 = /*steps*/ ctx[4][0];
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks_3[i]) {
						each_blocks_3[i].p(child_ctx, dirty);
						transition_in(each_blocks_3[i], 1);
					} else {
						each_blocks_3[i] = create_each_block_3(child_ctx);
						each_blocks_3[i].c();
						transition_in(each_blocks_3[i], 1);
						each_blocks_3[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value_3.length; i < each_blocks_3.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*steps*/ 16) {
				each_value_2 = /*steps*/ ctx[4][1];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
						transition_in(each_blocks_2[i], 1);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						transition_in(each_blocks_2[i], 1);
						each_blocks_2[i].m(div1, null);
					}
				}

				group_outros();

				for (i = each_value_2.length; i < each_blocks_2.length; i += 1) {
					out_1(i);
				}

				check_outros();
			}

			if (dirty & /*steps*/ 16) {
				each_value_1 = /*steps*/ ctx[4][2];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(div2, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
					out_2(i);
				}

				check_outros();
			}

			if (dirty & /*steps*/ 16) {
				each_value = /*steps*/ ctx[4][3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div3, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out_3(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_3.length; i += 1) {
				transition_in(each_blocks_3[i]);
			}

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks_2[i]);
			}

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks_3 = each_blocks_3.filter(Boolean);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				transition_out(each_blocks_3[i]);
			}

			each_blocks_2 = each_blocks_2.filter(Boolean);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				transition_out(each_blocks_2[i]);
			}

			each_blocks_1 = each_blocks_1.filter(Boolean);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			destroy_each(each_blocks_3, detaching);
			/*div0_binding*/ ctx[5](null);
			destroy_each(each_blocks_2, detaching);
			/*div1_binding*/ ctx[6](null);
			destroy_each(each_blocks_1, detaching);
			/*div2_binding*/ ctx[7](null);
			destroy_each(each_blocks, detaching);
			/*div3_binding*/ ctx[8](null);
		}
	};
}

function blink(elements) {
	elements.forEach(element => {
		element.classList.add("blink");
	});

	setTimeout(
		() => {
			elements.forEach(element => {
				element.classList.remove("blink");
			});
		},
		500 / 4
	);
}

function instance($$self, $$props, $$invalidate) {
	var length = 16,
		current = 0,
		channel1,
		channel2,
		channel3,
		channel4,
		steps = [
			[
				true,
				false,
				false,
				false,
				true,
				false,
				false,
				false,
				true,
				false,
				false,
				false,
				true,
				false,
				false,
				false
			],
			[
				false,
				false,
				false,
				false,
				true,
				false,
				false,
				false,
				false,
				false,
				false,
				false,
				true,
				false,
				false,
				false
			],
			[
				false,
				false,
				true,
				false,
				false,
				false,
				true,
				true,
				false,
				true,
				true,
				false,
				false,
				false,
				true,
				false
			],
			[
				false,
				false,
				false,
				false,
				false,
				false,
				false,
				false,
				false,
				false,
				false,
				true,
				false,
				false,
				true,
				false
			]
		];

	function progress() {
		current = ++current % length;

		let blinkable = [
			channel1.children[current],
			channel2.children[current],
			channel3.children[current],
			channel4.children[current]
		];

		blink(blinkable);
	}

	onMount(() => {
		setInterval(progress, 500 / 4);
	});

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			channel1 = $$value;
			$$invalidate(0, channel1);
		});
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			channel2 = $$value;
			$$invalidate(1, channel2);
		});
	}

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			channel3 = $$value;
			$$invalidate(2, channel3);
		});
	}

	function div3_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			channel4 = $$value;
			$$invalidate(3, channel4);
		});
	}

	return [
		channel1,
		channel2,
		channel3,
		channel4,
		steps,
		div0_binding,
		div1_binding,
		div2_binding,
		div3_binding
	];
}

class Sequencer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Sequencer;