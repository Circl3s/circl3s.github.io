import './Hobbies.svelte.css.proxy.js';
/* src/index/Hobbies.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import Button from "../shared/Button.svelte.js";
import Card from "../shared/Card.svelte.js";
import Marker from "../shared/Marker.svelte.js";
import Sequencer from "./Sequencer.svelte.js";
import Typewriter from "./Typewriter.svelte.js";
import WebGL from "../shared/WebGL.svelte.js";
import blobs from "../shaders/blobs.js";

function create_title_slot_1(ctx) {
	let h2;

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "Sound Design";
			attr(h2, "slot", "title");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (76:20) <Button disabled>
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text("Browse (coming soon)");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (68:16) 
function create_content_slot_1(ctx) {
	let div;
	let sequencer;
	let t0;
	let p;
	let t2;
	let button;
	let current;
	sequencer = new Sequencer({});

	button = new Button({
			props: {
				disabled: true,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			create_component(sequencer.$$.fragment);
			t0 = space();
			p = element("p");
			p.textContent = "I started listening to electronic music when I was a little kid and became interested in making it myself soon after. \n                        I released my first track on YouTube in 2014 and since then my various tracks and covers have gathered over 1 million streams in total. \n                        Over the years I realized I am much more interested in the sound design aspect of creating electronic music than the composition itself, and therefore have spent my life mastering various synthesis methods and collecting hardware synthesizers. \n                        Genres like Electro House and Synthwave are my bread and butter, but I also like to experiment and even dabble in cinematic/orchestral composing.";
			t2 = space();
			create_component(button.$$.fragment);
			attr(p, "class", "svelte-18x7nsg");
			attr(div, "slot", "content");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(sequencer, div, null);
			append(div, t0);
			append(div, p);
			append(div, t2);
			mount_component(button, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(sequencer.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(sequencer.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(sequencer);
			destroy_component(button);
		}
	};
}

// (84:16) 
function create_title_slot(ctx) {
	let h2;

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "Programming";
			attr(h2, "slot", "title");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (97:20) <Button disabled>
function create_default_slot(ctx) {
	let t;

	return {
		c() {
			t = text("Browse (coming soon)");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (87:16) 
function create_content_slot(ctx) {
	let div;
	let typewriter;
	let t0;
	let p;
	let t2;
	let button;
	let current;
	typewriter = new Typewriter({});

	button = new Button({
			props: {
				disabled: true,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			create_component(typewriter.$$.fragment);
			t0 = space();
			p = element("p");
			p.textContent = "I've been deeply invested in computers and programming for a long time. \n                        I've written in many programming and scripting languages, predominantly Javascript, Python, Crystal and PowerShell, but I'm always learning new languages and frameworks. \n                        Other languages I'm learning or have used in the past include Rust, PHP, Ruby and Lua among others. \n                        I have experience using MySQL and Redis databases and have utilized SSR, designed APIs and written server-side applications that interact with them. \n                        I have a grasp on component-based frontend building having used Flutter and Svelte. \n                        I often spend my free time learning new technologies, like WebGL, WebAssembly, PWA, etc.";
			t2 = space();
			create_component(button.$$.fragment);
			attr(p, "class", "svelte-18x7nsg");
			attr(div, "slot", "content");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(typewriter, div, null);
			append(div, t0);
			append(div, p);
			append(div, t2);
			mount_component(button, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(typewriter.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(typewriter.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(typewriter);
			destroy_component(button);
		}
	};
}

function create_fragment(ctx) {
	let marker;
	let t0;
	let div4;
	let div2;
	let div0;
	let card0;
	let t1;
	let div1;
	let card1;
	let t2;
	let div3;
	let current;
	marker = new Marker({ props: { name: "hobbies" } });

	card0 = new Card({
			props: {
				$$slots: {
					content: [create_content_slot_1],
					title: [create_title_slot_1]
				},
				$$scope: { ctx }
			}
		});

	card1 = new Card({
			props: {
				$$slots: {
					content: [create_content_slot],
					title: [create_title_slot]
				},
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(marker.$$.fragment);
			t0 = space();
			div4 = element("div");
			div2 = element("div");
			div0 = element("div");
			create_component(card0.$$.fragment);
			t1 = space();
			div1 = element("div");
			create_component(card1.$$.fragment);
			t2 = space();
			div3 = element("div");
			attr(div0, "class", "hobby svelte-18x7nsg");
			attr(div1, "class", "hobby svelte-18x7nsg");
			attr(div2, "class", "columns svelte-18x7nsg");
			attr(div3, "class", "bg svelte-18x7nsg");
			attr(div4, "class", "Hobbies svelte-18x7nsg");
		},
		m(target, anchor) {
			mount_component(marker, target, anchor);
			insert(target, t0, anchor);
			insert(target, div4, anchor);
			append(div4, div2);
			append(div2, div0);
			mount_component(card0, div0, null);
			append(div2, t1);
			append(div2, div1);
			mount_component(card1, div1, null);
			append(div4, t2);
			append(div4, div3);
			current = true;
		},
		p(ctx, [dirty]) {
			const card0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card0_changes.$$scope = { dirty, ctx };
			}

			card0.$set(card0_changes);
			const card1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card1_changes.$$scope = { dirty, ctx };
			}

			card1.$set(card1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(marker.$$.fragment, local);
			transition_in(card0.$$.fragment, local);
			transition_in(card1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(marker.$$.fragment, local);
			transition_out(card0.$$.fragment, local);
			transition_out(card1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(marker, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div4);
			destroy_component(card0);
			destroy_component(card1);
		}
	};
}

class Hobbies extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Hobbies;