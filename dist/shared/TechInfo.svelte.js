import './TechInfo.svelte.css.proxy.js';
/* src/shared/TechInfo.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out,
	update_slot
} from "../../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../../_snowpack/pkg/svelte.js";
const get_content_slot_changes = dirty => ({});
const get_content_slot_context = ctx => ({});
const get_header_slot_changes = dirty => ({});
const get_header_slot_context = ctx => ({});

function create_fragment(ctx) {
	let div2;
	let div0;
	let t;
	let div1;
	let current;
	let mounted;
	let dispose;
	const header_slot_template = /*#slots*/ ctx[5].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[4], get_header_slot_context);
	const content_slot_template = /*#slots*/ ctx[5].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[4], get_content_slot_context);

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			if (header_slot) header_slot.c();
			t = space();
			div1 = element("div");
			if (content_slot) content_slot.c();
			attr(div0, "class", "header svelte-xq2a5u");
			attr(div1, "class", "content");
			set_style(div1, "display", /*open*/ ctx[0] ? "block" : "none");
			attr(div2, "class", "TechInfo svelte-xq2a5u");
			set_style(div2, "background-color", /*bg_color*/ ctx[1]);
			set_style(div2, "color", /*text_color*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);

			if (header_slot) {
				header_slot.m(div0, null);
			}

			append(div2, t);
			append(div2, div1);

			if (content_slot) {
				content_slot.m(div1, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(div0, "click", /*toggle*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (header_slot) {
				if (header_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[4], !current ? -1 : dirty, get_header_slot_changes, get_header_slot_context);
				}
			}

			if (content_slot) {
				if (content_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[4], !current ? -1 : dirty, get_content_slot_changes, get_content_slot_context);
				}
			}

			if (!current || dirty & /*open*/ 1) {
				set_style(div1, "display", /*open*/ ctx[0] ? "block" : "none");
			}

			if (!current || dirty & /*bg_color*/ 2) {
				set_style(div2, "background-color", /*bg_color*/ ctx[1]);
			}

			if (!current || dirty & /*text_color*/ 4) {
				set_style(div2, "color", /*text_color*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			transition_in(content_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			transition_out(content_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (header_slot) header_slot.d(detaching);
			if (content_slot) content_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { bg_color = "#e4e4e7" } = $$props;
	let { text_color = "#000000" } = $$props;
	let { open = false } = $$props;
	let twisty;

	function toggle() {
		$$invalidate(0, open = !open);
	}

	onMount(() => {
		
	});

	$$self.$$set = $$props => {
		if ("bg_color" in $$props) $$invalidate(1, bg_color = $$props.bg_color);
		if ("text_color" in $$props) $$invalidate(2, text_color = $$props.text_color);
		if ("open" in $$props) $$invalidate(0, open = $$props.open);
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [open, bg_color, text_color, toggle, $$scope, slots];
}

class TechInfo extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { bg_color: 1, text_color: 2, open: 0 });
	}
}

export default TechInfo;