import './Step.svelte.css.proxy.js';
/* src/index/Step.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal
} from "../../_snowpack/pkg/svelte/internal.js";

function create_fragment(ctx) {
	let div;
	let div_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "class", div_class_value = "Step bg-" + (/*active*/ ctx[0] ? /*color*/ ctx[1] : "gray") + "-800 " + (/*blink*/ ctx[2] ? "blink" : "") + " " + (!/*active*/ ctx[0] ? "no-blink" : "") + " svelte-186yjq1");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = listen(div, "click", /*toggle*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*active, color, blink*/ 7 && div_class_value !== (div_class_value = "Step bg-" + (/*active*/ ctx[0] ? /*color*/ ctx[1] : "gray") + "-800 " + (/*blink*/ ctx[2] ? "blink" : "") + " " + (!/*active*/ ctx[0] ? "no-blink" : "") + " svelte-186yjq1")) {
				attr(div, "class", div_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { color = "gray" } = $$props;
	let { active = false } = $$props;
	let { blink = false } = $$props;

	function toggle() {
		$$invalidate(0, active = !active);
	}

	$$self.$$set = $$props => {
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("active" in $$props) $$invalidate(0, active = $$props.active);
		if ("blink" in $$props) $$invalidate(2, blink = $$props.blink);
	};

	return [active, color, blink, toggle];
}

class Step extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { color: 1, active: 0, blink: 2 });
	}
}

export default Step;