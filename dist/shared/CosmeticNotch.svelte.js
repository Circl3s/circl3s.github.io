import './CosmeticNotch.svelte.css.proxy.js';
/* src/shared/CosmeticNotch.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	attr,
	binding_callbacks,
	detach,
	element as element_1,
	init,
	insert,
	noop,
	safe_not_equal
} from "../../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../../_snowpack/pkg/svelte.js";

function create_fragment(ctx) {
	let div;
	let div_class_value;

	return {
		c() {
			div = element_1("div");
			attr(div, "class", div_class_value = "CosmeticNotch bg-" + /*color*/ ctx[0] + " svelte-1itqs90");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[3](div);
		},
		p(ctx, [dirty]) {
			if (dirty & /*color*/ 1 && div_class_value !== (div_class_value = "CosmeticNotch bg-" + /*color*/ ctx[0] + " svelte-1itqs90")) {
				attr(div, "class", div_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[3](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { orientation = "bottom-right" } = $$props;
	let { color = "gray-200" } = $$props;
	let element;

	onMount(() => {
		switch (orientation.toLowerCase()) {
			case "bottom-right":
				$$invalidate(1, element.style.clipPath = "polygon(0 100%, 100% 0, 100% 100%)", element);
				break;
			case "top-right":
				$$invalidate(1, element.style.clipPath = "polygon(0 0, 100% 0, 100% 100%)", element);
				break;
			case "top-left":
				$$invalidate(1, element.style.clipPath = "polygon(0 0, 100% 0, 0 100%)", element);
				break;
			case "bottom-left":
				$$invalidate(1, element.style.clipPath = "polygon(0 100%, 100% 100%, 0 0)", element);
				break;
			default:
				break;
		}
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			element = $$value;
			$$invalidate(1, element);
		});
	}

	$$self.$$set = $$props => {
		if ("orientation" in $$props) $$invalidate(2, orientation = $$props.orientation);
		if ("color" in $$props) $$invalidate(0, color = $$props.color);
	};

	return [color, element, orientation, div_binding];
}

class CosmeticNotch extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { orientation: 2, color: 0 });
	}
}

export default CosmeticNotch;