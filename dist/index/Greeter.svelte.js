import './Greeter.svelte.css.proxy.js';
/* src/index/Greeter.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	create_component,
	create_in_transition,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	svg_element,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { draw } from "../../_snowpack/pkg/svelte/transition.js";
import Notch from "./Notch.svelte.js";

function create_if_block(ctx) {
	let div;
	let svg0;
	let path0;
	let path0_intro;
	let t0;
	let svg1;
	let path1;
	let path1_intro;
	let t1;
	let svg2;
	let path2;
	let path2_intro;
	let t2;
	let notch;
	let current;
	notch = new Notch({});

	return {
		c() {
			div = element("div");
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			t0 = space();
			svg1 = svg_element("svg");
			path1 = svg_element("path");
			t1 = space();
			svg2 = svg_element("svg");
			path2 = svg_element("path");
			t2 = space();
			create_component(notch.$$.fragment);
			attr(path0, "d", "M2,50a48,48 0 1,0 96,0a48,48 0 1,0 -96,0");
			attr(path0, "fill", "transparent");
			attr(path0, "stroke", "white");
			attr(path0, "stroke-width", "2");
			attr(svg0, "viewBox", "0 0 100 100");
			attr(svg0, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg0, "class", "svelte-1f97r2g");
			attr(path1, "d", "M2,50a48,48 0 1,0 96,0a48,48 0 1,0 -96,0");
			attr(path1, "fill", "transparent");
			attr(path1, "stroke", "white");
			attr(path1, "stroke-width", "2");
			attr(svg1, "viewBox", "0 0 100 100");
			attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg1, "class", "svelte-1f97r2g");
			attr(path2, "d", "M2,50a48,48 0 1,0 96,0a48,48 0 1,0 -96,0");
			attr(path2, "fill", "transparent");
			attr(path2, "stroke", "white");
			attr(path2, "stroke-width", "2");
			attr(svg2, "viewBox", "0 0 100 100");
			attr(svg2, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg2, "class", "svelte-1f97r2g");
			attr(div, "class", "row svelte-1f97r2g");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, svg0);
			append(svg0, path0);
			append(div, t0);
			append(div, svg1);
			append(svg1, path1);
			append(div, t1);
			append(div, svg2);
			append(svg2, path2);
			insert(target, t2, anchor);
			mount_component(notch, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;

			if (!path0_intro) {
				add_render_callback(() => {
					path0_intro = create_in_transition(path0, draw, { delay: 0, duration: 2000 });
					path0_intro.start();
				});
			}

			if (!path1_intro) {
				add_render_callback(() => {
					path1_intro = create_in_transition(path1, draw, { delay: 100, duration: 2000 });
					path1_intro.start();
				});
			}

			if (!path2_intro) {
				add_render_callback(() => {
					path2_intro = create_in_transition(path2, draw, { delay: 200, duration: 2000 });
					path2_intro.start();
				});
			}

			transition_in(notch.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(notch.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching) detach(t2);
			destroy_component(notch, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current;
	let if_block = /*ready*/ ctx[0] == true && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			attr(div, "class", "Greeter svelte-1f97r2g");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*ready*/ ctx[0] == true) {
				if (if_block) {
					if (dirty & /*ready*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let ready = false;

	document.body.onload = event => {
		$$invalidate(0, ready = true);
	};

	return [ready];
}

class Greeter extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Greeter;