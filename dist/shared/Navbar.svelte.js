import './Navbar.svelte.css.proxy.js';
/* src/shared/Navbar.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_flush_callback,
	add_render_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	globals,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

const { window: window_1 } = globals;
import Menu from "./Menu.svelte.js";
import { _ } from "../../_snowpack/pkg/svelte-i18n.js";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (103:4) {#if anchors.length > 0}
function create_if_block(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*wide*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (110:8) {:else}
function create_else_block(ctx) {
	let menu_1;
	let updating_open;
	let current;

	function menu_1_open_binding(value) {
		/*menu_1_open_binding*/ ctx[8](value);
	}

	let menu_1_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*menu*/ ctx[3] !== void 0) {
		menu_1_props.open = /*menu*/ ctx[3];
	}

	menu_1 = new Menu({ props: menu_1_props });
	binding_callbacks.push(() => bind(menu_1, "open", menu_1_open_binding));

	return {
		c() {
			create_component(menu_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(menu_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const menu_1_changes = {};

			if (dirty & /*$$scope, anchors*/ 16385) {
				menu_1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open && dirty & /*menu*/ 8) {
				updating_open = true;
				menu_1_changes.open = /*menu*/ ctx[3];
				add_flush_callback(() => updating_open = false);
			}

			menu_1.$set(menu_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(menu_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(menu_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(menu_1, detaching);
		}
	};
}

// (104:8) {#if wide}
function create_if_block_1(ctx) {
	let div;
	let each_value = /*anchors*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "links");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*anchors*/ 1) {
				each_value = /*anchors*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (112:16) {#each anchors as anchor}
function create_each_block_1(ctx) {
	let a;
	let t_value = /*anchor*/ ctx[9] + "";
	let t;
	let a_href_value;

	return {
		c() {
			a = element("a");
			t = text(t_value);
			attr(a, "href", a_href_value = "#" + /*anchor*/ ctx[9].toLowerCase());
			attr(a, "class", "svelte-1e3gemt");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);
		},
		p(ctx, dirty) {
			if (dirty & /*anchors*/ 1 && t_value !== (t_value = /*anchor*/ ctx[9] + "")) set_data(t, t_value);

			if (dirty & /*anchors*/ 1 && a_href_value !== (a_href_value = "#" + /*anchor*/ ctx[9].toLowerCase())) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

// (111:12) <Menu bind:open={menu}>
function create_default_slot(ctx) {
	let each_1_anchor;
	let each_value_1 = /*anchors*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*anchors*/ 1) {
				each_value_1 = /*anchors*/ ctx[0];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (106:16) {#each anchors as anchor}
function create_each_block(ctx) {
	let a;
	let t_value = /*anchor*/ ctx[9] + "";
	let t;
	let a_href_value;

	return {
		c() {
			a = element("a");
			t = text(t_value);
			attr(a, "href", a_href_value = "#" + /*anchor*/ ctx[9].toLowerCase());
			attr(a, "class", "svelte-1e3gemt");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);
		},
		p(ctx, dirty) {
			if (dirty & /*anchors*/ 1 && t_value !== (t_value = /*anchor*/ ctx[9] + "")) set_data(t, t_value);

			if (dirty & /*anchors*/ 1 && a_href_value !== (a_href_value = "#" + /*anchor*/ ctx[9].toLowerCase())) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

function create_fragment(ctx) {
	let scrolling = false;

	let clear_scrolling = () => {
		scrolling = false;
	};

	let scrolling_timeout;
	let div;
	let a;
	let h2;
	let t0;
	let t1;
	let div_class_value;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowscroll*/ ctx[7]);
	let if_block = /*anchors*/ ctx[0].length > 0 && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			a = element("a");
			h2 = element("h2");
			t0 = text(/*title*/ ctx[1]);
			t1 = space();
			if (if_block) if_block.c();
			attr(h2, "class", "svelte-1e3gemt");
			attr(a, "href", /*title_link*/ ctx[2]);
			attr(a, "class", "svelte-1e3gemt");
			attr(div, "class", div_class_value = "Navbar " + (/*scroll*/ ctx[4] == 0 && !/*menu*/ ctx[3] ? "" : "bg") + " svelte-1e3gemt");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, a);
			append(a, h2);
			append(h2, t0);
			append(div, t1);
			if (if_block) if_block.m(div, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window_1, "resize", /*handleResize*/ ctx[6]),
					listen(window_1, "scroll", () => {
						scrolling = true;
						clearTimeout(scrolling_timeout);
						scrolling_timeout = setTimeout(clear_scrolling, 100);
						/*onwindowscroll*/ ctx[7]();
					})
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*scroll*/ 16 && !scrolling) {
				scrolling = true;
				clearTimeout(scrolling_timeout);
				scrollTo(window_1.pageXOffset, /*scroll*/ ctx[4]);
				scrolling_timeout = setTimeout(clear_scrolling, 100);
			}

			if (!current || dirty & /*title*/ 2) set_data(t0, /*title*/ ctx[1]);

			if (!current || dirty & /*title_link*/ 4) {
				attr(a, "href", /*title_link*/ ctx[2]);
			}

			if (/*anchors*/ ctx[0].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*anchors*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*scroll, menu*/ 24 && div_class_value !== (div_class_value = "Navbar " + (/*scroll*/ ctx[4] == 0 && !/*menu*/ ctx[3] ? "" : "bg") + " svelte-1e3gemt")) {
				attr(div, "class", div_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { anchors = [] } = $$props;
	let { title = "Circl3s" } = $$props;
	let { title_link = "#" } = $$props;
	let menu;
	let scroll = 0;
	let wide = window.innerWidth > 768;

	function handleResize(e) {
		$$invalidate(5, wide = window.innerWidth > 768);
	}

	function onwindowscroll() {
		$$invalidate(4, scroll = window_1.pageYOffset)
	}

	function menu_1_open_binding(value) {
		menu = value;
		$$invalidate(3, menu);
	}

	$$self.$$set = $$props => {
		if ("anchors" in $$props) $$invalidate(0, anchors = $$props.anchors);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("title_link" in $$props) $$invalidate(2, title_link = $$props.title_link);
	};

	return [
		anchors,
		title,
		title_link,
		menu,
		scroll,
		wide,
		handleResize,
		onwindowscroll,
		menu_1_open_binding
	];
}

class Navbar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { anchors: 0, title: 1, title_link: 2 });
	}
}

export default Navbar;